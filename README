lib-linguist
============

Description language for regular and context-free languages. Includes algorithms for building FSMs, PDAs, deciding on strings, etc.

Regular Languages:

Finite State Machines are represented in JSON. FSMs are the quadruple (Alphabet, States, Transitions, Accepting States).They are represented 
as non-deterministic FSMs, i.e. they have transition relations rather than functions.

Alphabet is just an array of all symbols within the alphabet.

States are represented by natural numbers enclosed in angle braces, e.g. <0>, <1>, <5>
<0> is implicitly the start state.

Transitions are a subset of (States x Alphabet) x States.

Accepting States is just the set of accepting states.

Format:
{
    "alphabet":['a', 'b', 'c', ...],
    "states": 4,
    "trans": {
        "<0>, a":"<1>",
        "<0>, b":"<0>",
        "<1>, c":"<2>",
        ...
    },
    "accept":[2, 3]
}

Regular Expressions:

All alphabet symbols are regular expressions.
The empty string ("") is a regular expression.
The null set (NULL) is a regular expression.
AB is a regular expression if A and B are regular expressions. This is concatenation.
A | B is a regular expression if A and B are regular expressions. This is the or operator.
~A is a regular expression if A is a regular expression. This is complement/negation.
(A) is a regular expression if A is a regular expression.
A\* is a regular expression if A is a regular expression. This is the Kleene star operation.
A+ is a regular expression if A is a regular expression. This is equivalent to AA\*
